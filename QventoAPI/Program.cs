using QventoAPI;
using QventoAPI.Swagger;
using System.Reflection;
using Azure.Identity;

var builder = WebApplication.CreateBuilder(args);

var conn = Environment.GetEnvironmentVariable("AZURE_USERNAME");
//var keyVaultEndpoint = new Uri(Environment.GetEnvironmentVariable("VaultUri"));
//builder.Configuration.AddAzureKeyVault(keyVaultEndpoint, new DefaultAzureCredential());

// Vault
//var vaultTask = Vault.GetConnectionString();

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();

// Add controller comments in SwaggerUI
builder.Services.AddSwaggerGen(x =>
{
    //Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

    //... and tell Swagger to use those XML comments.
    x.IncludeXmlComments(xmlPath, includeControllerXmlComments: true);
});

var app = builder.Build();

// Authorization for swagger in production
app.UseSwaggerAuthorized();

// Wrap this in app.Environment.IsDevelopment() if only for dev
app.UseDeveloperExceptionPage();
app.UseSwagger();
app.UseSwaggerUI();


app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

//vaultTask.Wait();

app.Run();

public partial class Program { }
